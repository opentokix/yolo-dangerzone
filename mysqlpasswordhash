#!/usr/bin/env python

"""
MySQL Password and Hash Generator

Author: John Gallo

This program creates a MySQL 5 password hash that can be used to create GRANTS
using the hash instead of the password.
This is useful in many cases, including using the Puppetlabs-MySQL module which
expects a password hash when creating GRANTs
For example:
GRANT ALL ON *.* to user@% identified by PASSWORD 'PASS-HASH';

The program can generate random passwords of any length and provide a hash
or it can ask for a password and then output the hash.

It works both with command line arguments as well as in interactive module

Examples:

# Using Command line arguments - User provided password
$ create_mysql_password_hash.py -p secret
PASSWORD: secret
HASH: *14e65567abdb5135d0cfd9a70b3032c179a49ee7

# Using Command line arguments - Random password with X length (default length=12)
$ create_mysql_password_hash.py -r -l 20
PASSWORD: gnlrn96^g18jcblmssa6
HASH: *e3cbe60709e8abe2082c92cc5e72a762d5f18e22

# interactive mode
create_mysql_password_hash.py

"""

from random import choice
from hashlib import sha1
import getpass
import sys, os
import argparse

# Parse command line arguments
def parse_arguments():
    parser = argparse.ArgumentParser(description='MySQL Password Hash Generator')
    group = parser.add_mutually_exclusive_group()
    group.add_argument("-p","--password", type=str, help='Enter a password')
    group.add_argument("-r","--generate_random", action="store_true", help='Generate a random password')
    parser.add_argument("-l","--password_length", type=int, default=12, help='Enter the password length')
    args = parser.parse_args()

    return args

# Display interactive menu
def interactive_menu():
    print "MySQL Password Hash Generator\n"
    print "Please choose an option:"
    print "1. Enter Password"
    print "2. Generate Random Password"
    print "\n0. Quit"

    choice = raw_input(" >>  ")

    if choice == '0':
        sys.exit('Quitting...')
    elif choice == '1':
        return get_password_from_user()
    elif choice == '2':
        return menu_item_2()
    else:
        sys.exit("You must enter a valid option")

# Display submenu for choice 2
def menu_item_2():
    print "\n==> Generate Random Password\n"
    print "1. Enter Password Length"
    print "\n2. Back"
    print "0. Quit"

    choice = raw_input(" >>  ")

    if choice == '0':
        sys.exit('Quitting...')
    elif choice == '1':
        pass_length = get_password_length()
        password = generate_random_password(pass_length)
        return password
    elif choice == '2':
        return interactive_menu()
    else:
        sys.exit("You must enter a valid option")

# Get password from user interactively
def get_password_from_user():
  password = getpass.getpass(prompt='Password: ')
 
  return password

# Get password length from user interactively
def get_password_length():
    pass_length = raw_input('Password Length(int): ')
    try:
        return int(pass_length)
    except ValueError, e:
        sys.exit("Incorrect Value: must be an integer")

# Generate random password from password space and password length
def generate_random_password(pass_length):
    pass_space = 'abcdefghijklmnopqrstuvwxyz0123456789%^*(-_=+)'
    password=''
    for i in range(pass_length):
        password += ''.join([choice(pass_space)])

    return password

# Generate a MySQL5 Password Hash
def generate_mysql_hash(password):
    mysql_hash = '*' + sha1(sha1(password).digest()).hexdigest()

    return mysql_hash

# Main Program
def main():
    # Get arguments
    args = parse_arguments()

    # If there are no arguments, run interactive
    if not args.password and not args.generate_random:
        mysql_password = interactive_menu()
    # Otherwise run using command line arguments
    elif args.password:
        mysql_password = args.password
    else:
        mysql_password = generate_random_password(args.password_length)

    mysql_hash = generate_mysql_hash(mysql_password)
    print "PASSWORD: {0}".format(mysql_password)
    print "HASH: {0}".format(mysql_hash)


# Run
if __name__ == "__main__":
    main()


